# Copyright (c) 2024, National Research Foundation (SARAO)

"""Utilities for unit tests."""

from collections.abc import Iterator
from fractions import Fraction
from typing import Callable

import numpy as np
import xarray as xr
from astropy.time import Time


def complex_random(gen_real: Callable[[], np.ndarray], /) -> np.ndarray:
    """Generate complex random numbers from a callback for real random numbers.

    The resulting random numbers have the real and imaginary parts independently
    generated by the callable.
    """
    return gen_real() + 1j * gen_real()


class SimpleStream:
    """Stream that holds its data in memory.

    If `chunk_size` is given, the given data will be split into chunks of this
    size (on the time dimension).
    """

    def __init__(
        self, time_base: Time, time_scale: Fraction, data: xr.DataArray, chunk_size: int | None = None
    ) -> None:
        self.time_base = time_base
        self.time_scale = time_scale
        self.channels = data.sizes.get("channel")
        if chunk_size is None:
            self.chunks = [data]
        else:
            self.chunks = []
            for start in range(0, data.sizes["time"], chunk_size):
                stop = min(start + chunk_size, data.sizes["time"])
                chunk = data.isel(time=np.s_[start:stop])
                chunk.attrs["time_bias"] += start
                self.chunks.append(chunk)

    def __iter__(self) -> Iterator[xr.DataArray]:
        return iter(self.chunks)
